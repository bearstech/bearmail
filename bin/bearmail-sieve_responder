#!/bin/bash


# Copyright (C) 2009 Bearstech - http://bearstech.com/
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# bearmail-sieve_responder - part of bearmail
#
# This is a simple script for creating responders with sieve on a bearmail 
# configuration.

set -e

NAME=${0##*/}
BMMAILMAP="/etc/bearmail/mailmap"
BMUHDIR="/var/spool/bearmail"
BMSUC="/usr/sbin/bearmail-sieve_userconf"
CRON="/etc/cron.d/bearmail_sieve"

usage() {
cat << EOF
Usage: $NAME [OPTION]
       --help              print this help and exit
 -u,   --user              mail account
 -a,   --add               add a new responder
 -b,   --beginning-date     date of the start of responder (YYYYMMDD or now)
 -e,   --end-date          date of the end (YYYYMMDD)
 -d,   --del               del responder
 -l,   --list              list content of the responder


Example:
  $NAME -u me@domain.tld -a -b now -e 20100823
  $NAME -u me@domain.tld -d
  
EOF
}

done=0
while test "$done" = "0"; do
        case "$1" in
                 -h | -help | --h | --help)
                    usage
                    exit 0
                 ;;
                 -u | --user)
                    user_mail="$2"
                    shift ; shift ;;
		 -a | --add)
		    add_responder="yes"
		    shift ;;
                 -b | --beginning-date)
                    beginning_date="$2"
                    shift ; shift ;;
                 -e | --end-date)
                    end_date="$2"
                    shift ; shift ;;
		 -d | --del)
		    del_responder="yes"
		    shift ;;
		 -l | --list)
		    list_content="yes"
		    shift ;;
		 --force)
		    force="yes"
		    shift ;;
                 --*)
                    echo "unknown option: $1, try '$NAME -h' for help"
                    exit 1 ;;
                 -*)
                    echo "unknown option: $1, try '$NAME -h' for help"
                    exit 1 ;;
                 *)
                    done=1 ;;
        esac
done

# basic validation
if [ $# != 0 ]; then
  usage
  exit 1
fi
if [ -z "$user_mail" ] ; then
  usage
  exit 1
fi
if [ -z "$add_responder" ] && [ -z "$del_responder" ] &&  [ -z "$list_content" ]
   then
  usage 
  exit 1
fi
if [ -n "$list_content" ] ; then
  if [ -n "$add_responder" ] ||  [ -n "$del_responder" ] || \
     [ -n "$beginning_date" ] || [ -n "$end_date" ] ; then
    usage
    exit 1
  fi
fi
if [ -n "$add_responder" ] ; then
  if [ -z "$beginning_date" ] || [ -z "$end_date" ] ; then
    usage
    exit 1
  fi
fi
if [ -n "$del_responder" ]; then
  if [ -n "$beginning_date" ] || [ -n "$end_date" ] ; then
    usage
    exit 1
  fi
fi
    
# check sieve conf
if [ ! "$($BMSUC -u $user_mail -s | grep "is active")" ] ; then
  $BMSUC -u $user_mail -a
fi

# define sieve rules file
USER_DOMAIN=`echo $user_mail | sed -e "s/.*@//"`
USER_NAME=`echo $user_mail | sed -e "s/@.*//"`
SIEVE_FILE="$BMUHDIR/$USER_DOMAIN/$USER_NAME/sieve/bearmail.sieve"
MY_BMSF="$BMUHDIR/$USER_DOMAIN/$USER_NAME/.dovecot.sieve"

# list fonction
if [ -n "$list_content" ] ; then
  # check if there is a responder
  if [ ! "$(grep '# rule:\[BearMail vacation ' $SIEVE_FILE)" ] ; then
    echo "$user_mail : no responder found"
    exit
  fi
  echo "$user_mail:"
  # print cron start/end date
  CRON_B_DATE=$(grep "bearmail-sieve_responder -a -u $user_mail -b now" $CRON)
  CRON_E_DATE=$(grep "bearmail-sieve_responder -u $user_mail -d" $CRON)
  MY_EDATE=$(date -d 00$(echo "$CRON_E_DATE" | awk '{print $4 $3}') +"%d %B")
  MY_BDATE=$(date -d 00$(echo "$CRON_B_DATE" | awk '{print $4 $3}') +"%d %B")
  echo " - Responder starts on $MY_BDATE"
  echo " - Responder ends on $MY_EDATE"
  # print respondeur message
  echo " - responder message:"
  sed -n '/^# rule:\[BearMail vacation - do not edit]/ , /}/ p' $SIEVE_FILE | \
         sed -n '/text\:$/,/^;$/p' | sed '/[ \t]text:$/d;/^.$/d;/^;$/d'
  exit 0
fi

# delete fonction
if [ -n "$del_responder" ]; then
  # remove vacation require if needed
  if [ "$(grep '# rule:\[BearMail vacation - ' $SIEVE_FILE)" ] || \
     [ "$(grep "$NAME -u $user_mail -d" $CRON)" ]; then
    echo "$user_mail : responder removed"
    sed "/# rule:\[BearMail vacation - do not edit\]$/ , /}/ d" -i $SIEVE_FILE
    sed "/$NAME -u $user_mail -d/d" -i $CRON
    sed "/$NAME -a -u $user_mail -b /d" -i $CRON
  else
    echo "$user_mail : no responder found"
  fi
fi

# adding fonction
if [ -n "$add_responder" ] ; then
  # check date validity
  if [ -z "$(date -d $end_date)" ] || \
     [ "$(date -d $end_date +"%s")" -le "$(date +"%s")" ] ; then
    echo "Error: invalid end date"
    exit 1
  fi
  if [ "$beginning_date" != "now" ] ; then
    if [ -z "$(date -d $beginning_date)" ] ; then
      echo "Error: invalid beginning date"
      exit 1
    fi
    if [ "$beginning_date" -ge "$end_date" ] ; then
      echo "Error: end date is before beginning date."
      exit 1
    fi
    if [ "$(date -d $beginning_date +"%s")" -le "$(date +"%s")" ] ; then
      beginning_date="now"
    fi
  fi
  if [ ! "$force" ]; then
    if [ "$(grep '^# rule:\[BearMail vacation - do not edit]$' $SIEVE_FILE)" ]
      then
      echo "Error: $user_mail have already responder rules"
      echo "you should remove it before creating another one."
      exit 1
    fi
    # define user's aliases
    USER_ALIASES=`grep "^::$user_mail$" $BMMAILMAP | sed -e "s/::$user_mail//"`
    if [ -z "$USER_ALIASES" ] ; then
      MY_SIEVE_ALIAS=""
    else
      MY_SIEVE_ALIAS=`echo -e ", \"$USER_ALIASES" | \
                      sed -e :a -e '/$/N; s/\n/", "/; ta' | sed -e "s/$/\"/"`
    fi
    # ask for responder content
    echo "Define your vacation message and end it with EOF"
    while read input ; do
      my_vacation="$my_vacation\n$input"
      if [ "$input" = 'EOF' ] ; then
        break
      fi
    done
    # write vacation configuration
    if [ ! "$(grep '^require "vacation";' $SIEVE_FILE)" ]; then
      sed "1irequire \"vacation\";" -i $SIEVE_FILE
    fi
    cat >> $SIEVE_FILE << EOF
# rule:[BearMail vacation - do not edit]
if false # true
{
	vacation
		:days 15
		:addresses ["$user_mail"$MY_SIEVE_ALIAS]
		text:$(echo -e "$my_vacation" | grep -v "^EOF")
.
;
}
EOF

    # Create cronjob
    if [ "$beginning_date" = "now" ]; then
      begining_date=$(date +'%Y%m%d')
    fi
    MY_BDAY=`date -d $beginning_date +"%F" | awk -F "-" '{print $3}'`
    MY_BMONTH=`date -d $beginning_date +"%F" | awk -F "-" '{print $2}'`
    MY_EDAY=`date -d $end_date +"%F" | awk -F "-" '{print $3}'`
    MY_EMONTH=`date -d $end_date +"%F" | awk -F "-" '{print $2}'`
  
    echo "1 0 $MY_BDAY $MY_BMONTH * root $NAME -a -u $user_mail -b now \
-e $end_date --force" >> $CRON
    echo "1 0 $MY_EDAY $MY_EMONTH * root $NAME -u $user_mail -d" >> $CRON
  fi

  if [ "$beginning_date" = "now" ] || [ "$force" ]; then
    if [ "$($NAME -u $user_mail -l|grep "no responder found")" ] ; then
      echo "$user_mail: no responder found"
      exit 1
    fi
    # remove the line after "rule:[BearMail vacation and add "if true"
    sed '/^# rule:\[BearMail vacation - do not edit]$/{n;s/.*/if true/}' \
        -i $SIEVE_FILE
    sed "/$NAME -a -u $user_mail -b now/d" -i $CRON
    echo "1 0 $(date +'%d') $(date +'%m') * root $NAME -a -u $user_mail -b now \
-e $end_date --force" >> $CRON
  fi
fi

