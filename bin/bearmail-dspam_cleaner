#!/bin/bash

# Copyright (C) 2009 Bearstech - http://bearstech.com/
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# bearmail-dspam_cleaner - part of bearmail
#
# This is a script for different actions about Dspam dictionaries.
# It can make a fast check or a simple check about validity of a
# Dspam dictionary in bearmail environment. It can also clean, 
# compress and make a backup of dictionaries.
# Mainly created for crontab script, it can also be launch classicaly
#
# Ex: beamrail-dspam_cleaner --dictionary-check --verbose --mail mailadmin@domain.tld

NAME=${0##*/}
MAILMAP="/etc/bearmail/mailmap"
HOSTED_DOMAINS=$(grep ":local" $MAILMAP | grep -v "#" | \
                 sed "s/.*@//;s/:.*//" | sort | uniq)
DSPAM_DATA_HOME="/var/spool/dspam/data"
DSPAM_CSS_BKP="/var/tmp/dspam_dictionaries_backup"
DSPAM_USER="dspam"
RESTART_DSPAM='/etc/init.d/dspam restart'

function usage() {
cat << EOF
Usage: $NAME [OPTION]
        --help               print this help and exit
        --version            print version information and exit
 -dck,  --dictionary-check   check dictionary state and use a backup if a 
                               corrupted file is found
 -c,    --clean              cleaning dspam data, compress big dictionaries and
                               make a backup dictionary
 -v,    --verbose            verbose mode (mail output)


Example:
  $NAME -c -v
EOF
}

done=0
while test "$done" = "0"; do
        case "$1" in
                 -version | --version)
                    version
                    exit 0
                 ;;
                 -h | -help | --h | --help)
                    usage
                    exit 0
                 ;;
                 -dck | --dictionay-check)
                    dck="yes"
                    shift
                 ;;
		 -c | --clean)
		    clean="yes"
		    shift
		 ;;
		 -v | --verbose)
		    verbose="yes"
		    shift
		 ;;
                 --*)
                    echo "unknown option: $1, try '$NAME -h' for help"
                    exit 1
                 ;;
                 -*)
                    echo "unknown option: $1, try '$NAME -h' for help"
                    exit 1
                 ;;
                 *)
                    done=1
                 ;;
        esac
done
if [ $# != 0 ]; then
        usage
        exit 1
fi

if [ -z "$clean" ] && [ -z "$dck" ] ; then
  usage
  exit 1
fi

if [ "$mail" ] && [ ! "$mail_address" ] ; then
  usage
  exit 1
fi

## Main script
#

output() {
 if [ "$verbose" ] ; then
   echo -e "$*" | fmt -w 75 -s
 fi
}

DSPAM_ERROR="0"

# check if dspam is running
if [ -z "$(pgrep -x dspam)" ] ; then
  echo -e "Error: Dspam is not running\n"
  DSPAM_ERROR="1"
fi

# find css files in dspam home. If the domain is not in bearmail then drop it.
output "Cleaning non hosted domains in DSPAM..\n\n"
for domain in $(ls $DSPAM_DATA_HOME); do
  if [ -z "$(echo "$HOSTED_DOMAINS"|grep -i $domain)" ] ; then
    rm -rf $DSPAM_DATA_HOME/$domain
  fi
done
rm -rf $DSPAM_DATA_HOME/local

# Make directories for backup
for domains in $(echo "$HOSTED_DOMAINS"); do
  mkdir -p $DSPAM_CSS_BKP/$domains
done

# start checking css
if [ "$clean" ] ; then
  output "Checking dictionaries, make a backup and compress big css files..."
else
  output "Checking dictionaries..."
fi

for css in $(find $DSPAM_DATA_HOME/ -type f -name "*.css"); do
  BKP="$(echo $css | sed "s^$DSPAM_DATA_HOME^$DSPAM_CSS_BKP^" | awk -F "/" \
              '{print $1 "/" $2 "/" $3 "/" $4 "/" $5 "/" $7}')"
  CSS_ERROR="0"
  # check if the main dictionary is corrupted
  MYCSSSTAT=`cssstat $css`

  if [ "$(echo "$MYCSSSTAT" | grep "record length 0")" ] || \
     [ -z "$MYCSSSTAT" ] ; then
    echo -e " - Error: $css is corrupted. Using backuped css."
    CSS_ERROR="1"
    DSPAM_ERROR="1"
    # check if the backup is corrupted or not
    MYCSSSTATBKP=`cssstat $BKP`
    if [ "$(echo "$MYCSSSTATBKP" | grep "record length 0")" ] || \
       [ -z "$MYCSSSTATBKP" ] ; then
      echo -e "\tError: backup is corrupted too, removing dictionaries."
      rm $BKP $css
    else
     cp -a $BKP $css
     cssclean $css
     chown $DSPAM_USER: $BKP > /dev/null 2>&1
    fi
  fi
  # for make clean
  if [ "$clean" ] && [ $CSS_ERROR -ne 1 ] ; then
    # if the dictionary is bigger than 10 Mo, then compress it
    if [ $(du -s $css | awk '{print $1}') -ge 10000 ] ; then
      cp -a $css $css.tmp
      cssclean $css.tmp > /dev/null 2>&1
      csscompress $css.tmp > /dev/null 2>&1
      chown $DSPAM_USER: $css.tmp > /dev/null 2>&1
      # check if the new dictionary is corrupted or not
      if [ -z "$(cssstat $css.tmp)" ] ; then
        echo -e "\t- Error about $css : Compressed dictionary is corrupted \
but not the original. Please make a backup of $css and then try a cssclean && \
csscompress on it."
        rm $css.tmp
      else
        # if the compressed dictionary is clean, then use it and backup it
	cp -a $css.tmp $css
        cp -a $css.tmp $BKP
	rm $css.tmp
      fi
    else
      # if the main dictionary is small, then backup it
      cp -a $css $BKP
    fi
  fi 
  sleep 1
done  

# if a dictionary is corrupted, restart dspam
if [ "$DSPAM_ERROR" -eq "1" ] ; then
  echo -e "$OUTPUT\n\nRestarting Dspam.."
  $RESTART_DSPAM
  if [ -z "$(pgrep -x dspam)" ] ; then
    echo "Error while restarting Dspam, plaese check it."
  else
    echo "Done"
  fi
  exit 1
fi

if [ "$DSPAM_ERROR" -eq "0" ] ; then
  if [ "$clean" = "yes" ] ; then
    output "\n\nNo error, all backup and file compression done."
  fi
  if [ -z "$clean" ] ; then
    output "\n\nNo error, all backup done."
  fi
fi
